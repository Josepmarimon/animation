-- ========================================
-- MIGRACIÓN 001: Tablas de Perfiles y Roles
-- ========================================
-- Descripción: Crea la estructura base para perfiles de usuarios y sistema de roles
-- Proyecto: Directorio de Profesionales de Animación
-- Fecha: 2025-01-23

-- ----------------------------------------
-- 1. TIPOS PERSONALIZADOS
-- ----------------------------------------

-- Tipo de rol de usuario
CREATE TYPE public.user_role AS ENUM ('standard', 'premium', 'admin');

-- Tipo de especialización en animación
CREATE TYPE public.animation_specialization AS ENUM (
  '2d_animation',
  '3d_animation',
  'character_design',
  'storyboard',
  'motion_graphics',
  'visual_effects',
  'stop_motion',
  'concept_art',
  'rigging',
  'compositing',
  'lighting',
  'texturing',
  'modeling'
);

-- ----------------------------------------
-- 2. TABLA DE PERFILES
-- ----------------------------------------

CREATE TABLE public.profiles (
  -- Identificadores
  id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,

  -- Información personal
  email TEXT,
  full_name TEXT,
  bio TEXT,
  avatar_url TEXT,

  -- Ubicación
  country TEXT NOT NULL,
  city TEXT NOT NULL,

  -- Información profesional
  specializations public.animation_specialization[] NOT NULL DEFAULT '{}',

  -- Información de contacto (estructura JSON flexible)
  contact_info JSONB DEFAULT '{
    "website": null,
    "linkedin": null,
    "instagram": null,
    "artstation": null,
    "behance": null,
    "vimeo": null,
    "youtube": null
  }'::jsonb,

  -- Portfolio de proyectos (array de objetos JSON)
  portfolio_projects JSONB[] DEFAULT '{}',

  -- Campos de visibilidad del perfil
  is_public BOOLEAN DEFAULT true,
  show_email BOOLEAN DEFAULT false,
  show_contact_info BOOLEAN DEFAULT true,

  -- Metadatos
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Comentarios en la tabla
COMMENT ON TABLE public.profiles IS 'Perfiles públicos de profesionales de animación';
COMMENT ON COLUMN public.profiles.id IS 'ID del usuario (referencia a auth.users)';
COMMENT ON COLUMN public.profiles.specializations IS 'Áreas de especialización del profesional';
COMMENT ON COLUMN public.profiles.contact_info IS 'Información de contacto en formato JSON';
COMMENT ON COLUMN public.profiles.portfolio_projects IS 'Array de proyectos del portfolio en formato JSON';
COMMENT ON COLUMN public.profiles.is_public IS 'Si el perfil es visible en el directorio público';

-- ----------------------------------------
-- 3. TABLA DE ROLES DE USUARIO
-- ----------------------------------------

CREATE TABLE public.user_roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  role public.user_role NOT NULL DEFAULT 'standard',

  -- Información de suscripción (para usuarios premium)
  subscription_start_date TIMESTAMPTZ,
  subscription_end_date TIMESTAMPTZ,

  -- Metadatos
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

  -- Restricción: un usuario solo puede tener un rol a la vez
  UNIQUE (user_id, role)
);

COMMENT ON TABLE public.user_roles IS 'Roles asignados a cada usuario';
COMMENT ON COLUMN public.user_roles.role IS 'Rol del usuario: standard (gratis), premium (pago), admin';
COMMENT ON COLUMN public.user_roles.subscription_start_date IS 'Fecha de inicio de suscripción premium';
COMMENT ON COLUMN public.user_roles.subscription_end_date IS 'Fecha de fin de suscripción premium';

-- ----------------------------------------
-- 4. ÍNDICES PARA OPTIMIZACIÓN
-- ----------------------------------------

-- Índice para búsquedas por país
CREATE INDEX idx_profiles_country ON public.profiles(country);

-- Índice para búsquedas por ciudad
CREATE INDEX idx_profiles_city ON public.profiles(city);

-- Índice para perfiles públicos
CREATE INDEX idx_profiles_is_public ON public.profiles(is_public) WHERE is_public = true;

-- Índice para búsquedas por especializaciones usando GIN (para arrays)
CREATE INDEX idx_profiles_specializations ON public.profiles USING GIN(specializations);

-- Índice para búsquedas por rol
CREATE INDEX idx_user_roles_role ON public.user_roles(role);

-- Índice para búsquedas por usuario en roles
CREATE INDEX idx_user_roles_user_id ON public.user_roles(user_id);

-- ----------------------------------------
-- 5. TRIGGER PARA UPDATED_AT
-- ----------------------------------------

-- Función para actualizar el campo updated_at
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger en tabla profiles
CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Trigger en tabla user_roles
CREATE TRIGGER update_user_roles_updated_at
  BEFORE UPDATE ON public.user_roles
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

COMMENT ON FUNCTION public.update_updated_at_column() IS 'Actualiza automáticamente el campo updated_at en cada UPDATE';
